#!/bin/bash

# This script copies a file from one git repository to another, preserving
# commit history.

git=/usr/bin/git
src="$1"
dst="$2"

usage() {
  message="$1"
  usage="Usage: ${0##*/} <source_file> <dest_directory>"
  printf "%s\n\n%s\n" "$usage" "$message" >&2
}

if [[ -z "$src" || -z "$dst" ]]; then
  usage "Please provide a source and destination"
  exit 1
fi

if [[ -e "$src" ]]; then
  if [[ ! -r "$src" ]]; then
    usage "Can not read file: $src"
    exit 2
  fi
  if [[ ! -f "$src" ]]; then
    usage "Source is not a file: $src"
    exit 4
  fi
  if ! (cd "${src%/*}" && $git status &>/dev/null); then
    usage "Source file is not tracked in a repository: $src"
    exit 5
  fi
else
  usage "File does not exist: $src"
  exit 3
fi

if [[ -e "$dst" ]]; then
  if [[ ! -r "$dst" ]]; then
    usage "Can not read file: $dst"
    exit 2
  fi
  if [[ ! -d "$dst" ]]; then
    usage "Destination is not a directory: $dst"
    exit 4
  fi
  if ! (cd "$dst" && $git status &>/dev/null); then
    usage "Destination is not a git repository: $src"
    exit 5
  fi
else
  usage "File does not exist: $dst"
  exit 3
fi

# Get proper absolute path to files
src=$(readlink -f "$src")
dst=$(readlink -f "$dst")

# Change to source file's directory to avoid all sorts of git flags
cd "${src%/*}"
# Dump a patch file that contains all the history of the file.
patch="/tmp/${src##*/}-patch.$$"
$git log --pretty=email --patch-with-stat --reverse -- "$src" > "$patch"
if [[ $? -ne 0 ]]; then
  echo "Patch creation failed for $src ($patch)" >&2
  # Cleanup may be a good idea, but perhaps something needs to be diagnosed.
  #rm "$patch"
  exit 6
fi

cd "$dst"
$git am < "$patch"
if [[ $? -ne 0 ]]; then
  echo "Patch application failed for $src ($patch)" >&2
  exit 7
fi

rm "$patch"
