#!/usr/bin/perl

use strict;
use warnings;

use Digest::MD5 qw(md5_hex);
use Getopt::Long;


# we don't want to create hashes for files larger than this.
# it takes a long time to generate MD5 sums of large files,
# so unless you need to check for duplicates on large files,
# 5M is a pretty good maximum.
my $max_size  = 1024 * 1024 * 5;

my $recurse   = 0;
my $dupe_dir  = '';
my $dry_run   = 0;

GetOptions(
  'r'       => \$recurse,
  'dupes'   => \$dupe_dir,
  'n'       => \$dry_run,
  'dryrun'  => \$dry_run,
);

my $start_dir = $ARGV[0] || '.';

# Hash of array references of filenames keyed on filesize
my %sizes   = ();
# Hash of file content hashes; duplicate hash = duplicate file (in theory)
my %hashes  = ();

my $dupes = scan_dir($start_dir);
printf "%s duplicate files found\n", $dupes;
exit;

sub scan_dir {
  my $dir = shift;
  printf "checking $dir\n";

  my $dupes = 0;
  my @sub_dirs = ();

  if (opendir my $dir_fh, $dir) {
    foreach my $file (grep { !/^\..*$/ } readdir $dir_fh) {
      my $full = "$dir/$file";
      if (-d $full) {
        push @sub_dirs, $full;
        next;
      }
      if (-f $full) {
        my $dupe = 0;
        my $size = (stat($full))[7];
        next if ($size > $max_size);
        my @size_matches = ();
           @size_matches = @{$sizes{$size}} if ($sizes{$size});
        foreach my $size_match (@size_matches) {
          $hashes{$full} = sumfile($full) unless ($hashes{$full});
          $hashes{$size_match} =
            sumfile($size_match) unless $hashes{$size_match};
          if ($hashes{$full} eq $hashes{$size_match}) {
            $dupes++;
            $dupe = 1;
            printf "%s duplicates\n  %s\n", $full, $size_match;
            if ($dry_run == 0) {
              mkdir $dupe_dir unless (-d $dupe_dir);
              if (!rename $full,"$dupe_dir/$file") {
                printf STDERR "failed to move %s: %s\n", $full, $!;
              }
            }
            last;
          }
        }
        push @size_matches, $full;
        $sizes{$size} = \@size_matches;
      }
    }
    closedir $dir_fh;
  } else {
    printf STDERR "Failed to open %s: %s\n", $dir, $!;
    exit 1;
  }

  if ($recurse != 0) {
    foreach my $sub_dir (@sub_dirs) {
      $dupes += scan_dir($sub_dir);
    }
  }

  return $dupes;
}


sub sumfile {
    my $file  = shift;

    my $md5   = '';

    if (open my $fh,'<',$file) {
      if (binmode $fh) {
        $md5 = md5_hex(<$fh>);
      } else {
        printf STDERR "Unable to binmode %s: %s\n", $file, $!;
        exit 2;
      }
      close $fh;
    } else {
      printf STDERR "Unable to open %s for reading: %s\n", $file, $!;
      exit 3;
    }
    return $md5;
}
